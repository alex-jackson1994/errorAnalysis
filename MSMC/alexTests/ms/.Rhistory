library(ggplot2)
# set working directory
#setwd("~/Documents/Semester_Years/2015/Semester2/MSMC/")
### FILE ACQUIRED FROM: alex@Mint17-HP-Studio-XPS-1645 ~/Dropbox/MAGenomics_2015/PSMC Scholarship/MSMC_AlexJulien/50LargestContigs $ scp acad-colab1@acad2.rc.adelaide.edu.au:/localscratch/AussieGenomes/TasmanianDevil/bwa_n0.04_seed/MSMC_50LongestContigs/TasmanianDevilSanger.Devil7_0.realigned_7Contigs5Mb_MSMC2Output.final.txt .
setwd("~/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/MSMC/alexTests/ms")
# Function to read MSMC input files + scale time and population size + print them into existing plot (for bootstrap)
# Generation time = 2y or 3.5y - mutation rate = 1.25e-8 s/s/g or 2.5e-8 s/s/g(human one)
#GEN=2
GEN_lo = 20
GEN_hi = 30
MU = 1.25e-8
#MU=2.5e-8
# from tutorial at http://nicercode.github.io/guides/repeating-things/ - and Paul!
scaleMSMCInput=function(MSMCInputFile){
MSMCInputTable<-read.table(MSMCInputFile, header=TRUE)
MSMCInputTable[,"scaledTimeLo"]<-GEN_lo*MSMCInputTable$left_time_boundary/MU
MSMCInputTable[,"scaledTimeHi"]<-GEN_hi*MSMCInputTable$left_time_boundary/MU
MSMCInputTable[,"scaledPopSize"]<-1/(2*MU*MSMCInputTable$lambda_00)
return(MSMCInputTable)
}
# # Read and scale MSMC input files for plotting
# TassieDevil.7Contigs5Mb.output<-read.table("TasmanianDevilSanger.Devil7_0.realigned_7Contigs5Mb_MSMCOutput.final.txt", header=TRUE)
# TassieDevil.7Contigs5Mb.output[,"scaledTime"]<-(GEN*TassieDevil.7Contigs5Mb.output$left_time_boundary/MU)
# TassieDevil.7Contigs5Mb.output[,"scaledPopSize"]<-(1/(2*MU*TassieDevil.7Contigs5Mb.output$lambda_00))
alldat <- scaleMSMCInput("msmcOut_test-4-1-10m.msmc.final.txt")
#TassieDevil.7Contigs5Mb.output <- scaleMSMCInput("TasmanianDevilSanger.Devil7_0.realigned_50LongestContigs_MSMCOutput.final.txt")
# Read all boostrap input files
#TassieDevil_BS_files <- lapply(1:7, function(x){paste0("TasmanianDevilSanger.Devil7_0.realigned_7Contigs5Mb_MSMCOutput_BS", x, ".final.txt")})
### Plot with steps usign ggplot - Ben
# First recal that I changed your function at the start to not have the "points()" line, so it just created a list of
# twenty dataframes of bootstrapped data for each Bison type. lapply is a function that says "take the list of things" and
# perform some function on them. You said "take the list of file names" and "scaleMSMCInput them".
#TassieDevilDat <- lapply(TassieDevil_BS_files, scaleMSMCInput)
#Wooddat <- lapply(Wood_BS_files, scaleMSMCInput)
#Eurodat <- lapply(European_BS_files, scaleMSMCInput)
# I began by combining the MSMC data into one data.frame by "rwo-binding" them using rbind().
#alldat <- TassieDevil50Contigs
# allow log scaling
alldat = alldat[alldat$scaledTimeLo != 0,]
alldat = alldat[alldat$scaledTimeHi != 0,]
alldat
# Then I just labelled them all by type. Recal that dim() returns a vector of the form (a,b) where a is the number of rowds, and b is the number of columns.
# Hence if I use dim(df)[1], I'm just asking for the first entry, which would be the number of rows for an arbitrary data.frame called "df".
#alldat$Type <- c(rep('Ancient Steppe A16121 - 6.13X',dim(TassieDevil.7Contigs5Mb.output)[1]),rep('Modern Wood Bison - 6.31X',dim(WoodBison.CowGenome.realigned_MSMC.output)[1]),
#                 rep('Modern European Bison - 6.32X',dim(EuropeanBison.CowGenome.realigned_MSMC.output)[1]))
# This value varies how "see through" the bootstrap lines will be. 1 is a solid line, closer to zero gives very see through.
alph <- 0.15
# I begin by making a ggplot() object called g1. I didn't define the data I'd use in the ggplot() part as it makes things harder later on. I prefer to do
# this when I'm layering plot on plot...there's an number of things going on here. I'll try and explain them in list, but you could find these on Hadley's
# documentation if you wanted.
# theme_bw(): makes the background black and white.
# in geom_step, size: the thickness of the plotted line.
# scale_y_log10(): Makes the y axis in the log 10 scale. This would through an error if any values were 0 (as log(0) in undefined).
# xlab(), ylab(): I use this to change the axis labels
# coord_cartesion: The range I will plot over on the x and y axes, defined by xlim and ylim as 2D vectors of the form c(min,max).
# theme(legend.title=element_blank()): Removes the ugly legen title.
g1 <- ggplot() + theme_bw() + scale_y_log10() + geom_step(aes(x=alldat$scaledTimeLo,y=alldat$scaledPopSize),size=1, colour="purple", linetype="dotted") + ylab("Scaled Population Size\n") +
xlab(expression(paste("Scaled Time (mu = 1.25e-8)\n"))) + coord_cartesian(xlim=c(80,max(alldat$scaledTimeLo)),ylim=c(min(alldat$scaledPopSize)*0.9,1.1*max(alldat$scaledPopSize))) +
theme(legend.title=element_blank()) + scale_x_log10() +
geom_step(aes(alldat$scaledTimeHi, y=alldat$scaledPopSize), size=1, colour="blue", linetype="dotted")
g1
g1 <- ggplot() + theme_bw() + scale_y_log10() + geom_step(aes(x=alldat$scaledTimeLo,y=alldat$scaledPopSize),size=1, colour="purple") + ylab("Scaled Population Size\n") +
xlab(expression(paste("Scaled Time (mu = 1.25e-8)\n"))) + coord_cartesian(xlim=c(80,max(alldat$scaledTimeLo)),ylim=c(min(alldat$scaledPopSize)*0.9,1.1*max(alldat$scaledPopSize))) +
theme(legend.title=element_blank()) + scale_x_log10() +
geom_step(aes(alldat$scaledTimeHi, y=alldat$scaledPopSize), size=1, colour="blue")
g1
g1 <- ggplot() + theme_bw() + scale_y_log10() + geom_step(aes(x=alldat$scaledTimeLo,y=alldat$scaledPopSize),size=1, colour="purple") + ylab("Scaled Population Size\n") +
xlab(expression(paste("Scaled Time (mu = 1.25e-8)\n"))) + coord_cartesian(xlim=c(min(alldat$scaledTimeLo)*0.9,max(alldat$scaledTimeHi)),ylim=c(min(alldat$scaledPopSize)*0.9,1.1*max(alldat$scaledPopSize))) +
theme(legend.title=element_blank()) + scale_x_log10() +
geom_step(aes(alldat$scaledTimeHi, y=alldat$scaledPopSize), size=1, colour="blue")
g1
# l is just the numb
