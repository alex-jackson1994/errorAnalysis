
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ########### INITIALISING STUFF
> 
> # From Alex's new method.
> Capacities = c(3275, 6370, 6824, 689, 764, 880, 3915, 297, 123, 1180)
> # Capacities = c(3211, 6310, 6792, 683, 760, 858, 3873, 286, 118, 1131)
> Capacities
 [1] 3275 6370 6824  689  764  880 3915  297  123 1180
> # Number of links in the system.
> Link = length(Capacities)
> Link
[1] 10
> 
> # Keeps track of how many circuits are being used.
> CircUse = rep(0,Link)
> CircUse
 [1] 0 0 0 0 0 0 0 0 0 0
> 
> # The A matrix.
> A_MATRIX01 <- read.csv("/home/alex/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/Phoenix/randomProcessesSimulationTest/A_MATRIX01.csv", row.names=1)
> A = data.matrix(A_MATRIX01, rownames.force = NA)
> A
   X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 X16 X17 X18 X19 X20 X21
1   0  0  0  0  0  1  0  0  0   0   0   0   1   0   0   0   0   0   1   0   0
2   1  1  1  1  1  0  1  1  0   0   0   0   1   0   0   0   0   0   1   0   0
3   1  1  1  0  0  0  1  1  0   0   0   1   1   0   0   0   0   1   1   0   0
4   0  0  0  1  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   0
5   0  0  0  0  0  0  0  0  0   0   1   0   0   0   0   0   1   0   0   0   0
6   0  1  0  0  0  0  0  0  1   0   0   0   0   0   0   1   1   1   1   1   1
7   1  0  1  0  0  0  0  0  1   0   1   1   1   0   1   1   0   0   0   0   0
8   0  0  0  0  0  0  1  0  0   0   0   0   0   0   0   0   0   0   0   1   0
9   0  0  0  0  0  0  0  0  0   0   0   0   0   1   0   0   0   0   0   0   0
10  0  0  1  0  0  0  0  0  0   1   0   0   0   0   0   1   0   0   0   0   0
   X22 X23 X24 X25 X26 X27 X28 X29 X30 X31 X32 X33 X34 X35 X36
1    0   0   1   0   0   0   1   0   0   1   0   0   1   1   0
2    0   0   1   0   0   0   1   0   0   1   0   0   1   1   0
3    0   1   1   0   0   0   0   0   0   0   1   1   1   1   0
4    0   0   0   0   0   1   1   0   0   0   0   0   0   0   0
5    1   0   0   0   0   0   0   1   1   0   0   0   0   0   0
6    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
7    1   1   1   0   1   0   0   0   0   0   0   0   0   0   0
8    0   0   0   0   0   0   0   1   0   0   1   0   1   0   1
9    0   0   0   1   0   0   0   0   0   0   0   0   0   0   0
10   1   1   1   1   1   0   0   0   0   0   0   0   0   0   0
> # The route traffic.
> TrafficVector01 <- read.csv("/home/alex/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/Phoenix/randomProcessesSimulationTest/TrafficVector01.csv", row.names=1)
> RouteTraffic = as.numeric(TrafficVector01)
> RouteTraffic
 [1] 1500  677   80  145  900  650   15  450   10  250  160  550  450   80  350
[16]    2   24   18    8    5   90   50  180   65   25  450  230  280   45  450
[31]  850   40 1850   50  825  110
> Routes = length(RouteTraffic)
> Routes
[1] 36
> 
> # Didn't end up needing this.
> # The link traffic, obtained by accounting for the traffic from the different routes.
> # LinkTraffic = A %*% RouteTraffic
> # LinkTraffic
> 
> # Keeps track of how many of the different types (routes) of calls are in the system.
> CallTypes = rep(0,Routes)
> CallTypes
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> 
> ########### DEFINING A NEW EXPONENTIAL FUNCTION
> 
> # STUFFED T_T
> NewExp = function(rates){
+   vectorlength = length(rates)
+   Output = rep(0,vectorlength)
+   # Basically, this function returns a huge value if the rate is 0, else is a normal exponential random variable
+   for (i in 1:vectorlength) {
+     if (rates[i] == 0) {
+       # Gives a large number.
+       Output[i] = 2.0*10^4
+     } else {
+       # Just gives an exponential as usual.
+       Output[i] = rexp(1,rates[i])
+     }
+   }
+   return(Output)
+ }
> 
> # How many time are we going to run this loop?
> # Trials = 4*42*10^6
> Trials = 10^6
> # Counter: a vector countaining (Non-blocked calls, blocked calls, number of times a call arrives)
> # Counter = c(0,0,0)
> 
> ### Now Counter is a 2 x Routes matrix. Counter[1,j] counts the number of times a route j call is blocked, and Counter[2,j] counts the number of times a route j call arrives.
> Counter = matrix(rep(0,2*Routes),nrow=2)
> StartCounting = 0.5 * 10^6
> 
> # We don't have to worry about a call ending happening with zero calls of that type in the system, as that's taken care of in the NewExp function.
> 
> # Check how long this goes for.
> ptm <- proc.time()
> 
> for (i in 1:Trials) {
+   InCalls = rexp(Routes,RouteTraffic) # Generates a random variable for each route - time unti a call of each type arrives.
+   EndCalls = NewExp(CallTypes) # Generates a time until a call of each time ends.
+   
+   # Find the position minimum from these above values, i.e. what is the event that occurs first, and more importantly, WHERE?
+   # "pmin" makes a vector which takes the minimum from each position of the input vectors. Then "which.min" says where the minimum is overall.
+   MinPosition = which.min(pmin(InCalls,EndCalls))
+   WhichVector = 0
+   # If WhichVector = 0, then it's an incoming call. Else it's a call ending.
+   
+   if (min(EndCalls) < min(InCalls)) {
+     WhichVector = 1
+   }
+   
+   # If it's a position j call in EndCalls, subtract column j in A from CircUse
+   if (WhichVector == 1) {
+    CallTypes[MinPosition] = CallTypes[MinPosition] - 1
+    CircUse = A %*% CallTypes 
+    
+    if (min(CircUse < 0)) {
+      cat("Error! You've got negative circuits! Fool.")
+    }
+   }
+   
+   # If it's a position k in InCalls...
+   if (WhichVector == 0) {
+     if (i > StartCounting) {
+       # Counter[3] = Counter[3] + 1 # Add one more call arriving.
+       Counter[2,MinPosition] = Counter[2,MinPosition] + 1
+     }
+     
+     # ... AND CircUse < Capacities for every RELEVANT component
+     RelevCapac = CircUse * A[,MinPosition]
+     Differences = Capacities - RelevCapac
+     
+   
+     if (min(Differences) > 0) {
+       # Add the relevant circuits for that call.
+       CallTypes[MinPosition] = CallTypes[MinPosition] + 1
+       CircUse = A %*% CallTypes 
+       
+       # Start after 1000 to make sure we're at equilibrium. UPDATE: I'm not going to bother counting calls that get through any more, only calls that are blocked.
+       # if (i > StartCounting) {
+       #  Counter[1] = Counter[1] + 1
+       #}
+     }
+     
+     # But what if the one of the links full?
+     if (min(Differences) == 0) {
+       # A call is blocked. Counter is a vector which counts when calls are blocked.
+       # cat("YOU SHALL NOT PASS! ")
+       if (i > StartCounting) {
+         # Counter[2] = Counter[2] + 1
+         Counter[1,MinPosition] = Counter[1,MinPosition] + 1
+       }
+     }
+     
+     # Sanity check.
+     if (min(Differences) < 0) {
+       cat("Error! min(Differences) < 0")
+     }
+   }
+   
+   # We never want link use < 0.
+   if (min(CircUse) < 0) {
+     cat("Error! min(CircUse) < 0")
+   }
+   
+   # Prints the state of the system (so we can see what's going on.)
+   # print("Output:")
+   # print(CallTypes)
+   # print(CircUse)
+   # print(Counter)
+ }
> 
>  proc.time() - ptm
   user  system elapsed 
226.180   0.088 226.513 
> #  OUTPUT: > proc.time() - ptm
> # user  system elapsed 
> # 522.771   0.613 575.016
> 
> # Test the proportions:
> # Matrix ChiSqTests has in position [1,a] the p-value for the one-sided chi-squared test that p<0.01, and in position [2,a] the upper value of the 95% C.I.
> # ChiSqTests = matrix(rep(0,2*Routes), nrow=2)
> # for (a in 1:Routes) {
> #   tmp = prop.test(x=Counter[1,a], n=Counter[2,a], p=0.01, alternative="less")
> #   ChiSqTests[1,a] = tmp$p.value
> #  ChiSqTests[2,a] = tmp$conf.int[2]
> # }
>  BinomTests = matrix(rep(0,2*Routes), nrow=2)
>  for (a in 1:Routes) {
+    # tmp = prop.test(x=Counter[1,a], n=Counter[2,a], p=0.01, alternative="less")
+    tmp = binom.test(Counter[1,a], Counter[2,a], p=0.01, alternative = "less")
+    BinomTests[1,a] = tmp$p.value
+    BinomTests[2,a] = tmp$conf.int[2]
+  }
> 
> Counter
      [,1]  [,2] [,3] [,4]  [,5]  [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
[1,]   282   110   14   31    46     5    1   52    0     0    31    60    95
[2,] 31642 14219 1687 3117 18855 13713  306 9384  199  5193  3371 11641  9371
     [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
[1,]     0    22     0     3     3     0     0    13     9    29    11     0
[2,]  1662  7307    37   540   388   166    92  1869  1056  3780  1321   515
     [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36]
[1,]    35    56    68     6    43    53     2   101     7   102     0
[2,]  9428  4860  5912   961  9556 18150   802 38794  1077 17424  2276
> Blocks = Counter[1,] / Counter[2,]
> Blocks
 [1] 0.0089122053 0.0077361277 0.0082987552 0.0099454604 0.0024396712
 [6] 0.0003646175 0.0032679739 0.0055413470 0.0000000000 0.0000000000
[11] 0.0091960842 0.0051541964 0.0101376587 0.0000000000 0.0030108116
[16] 0.0000000000 0.0055555556 0.0077319588 0.0000000000 0.0000000000
[21] 0.0069555912 0.0085227273 0.0076719577 0.0083270250 0.0000000000
[26] 0.0037123462 0.0115226337 0.0115020298 0.0062434964 0.0044997907
[31] 0.0029201102 0.0024937656 0.0026034954 0.0064995357 0.0058539945
[36] 0.0000000000
> # ChiSqTests
> BinomTests
            [,1]        [,2]       [,3]       [,4]         [,5]         [,6]
[1,] 0.026032930 0.002843670 0.29016603 0.53536492 8.453004e-36 6.155500e-52
[2,] 0.009831346 0.009057849 0.01294328 0.01339904 3.118315e-03 7.664932e-04
           [,7]         [,8]       [,9]        [,10]      [,11]        [,12]
[1,] 0.18888148 1.587006e-06 0.13533300 2.155587e-23 0.36013239 5.359819e-09
[2,] 0.01540831 6.976610e-03 0.01494119 5.767126e-04 0.01239107 6.386360e-03
          [,13]        [,14]        [,15]      [,16]      [,17]      [,18]
[1,] 0.58011371 5.567926e-08 1.954241e-12 0.68944909 0.21186279 0.45636905
[2,] 0.01201131 1.800863e-03 4.296506e-03 0.07777471 0.01429553 0.01986153
          [,19]      [,20]      [,21]      [,22]      [,23]      [,24]
[1,] 0.18855685 0.39667781 0.10952604 0.38918431 0.08330614 0.33111344
[2,] 0.01788472 0.03203786 0.01103593 0.01482516 0.01044598 0.01374553
           [,25]        [,26]      [,27]      [,28]      [,29]        [,30]
[1,] 0.005650999 1.820684e-12 0.87144779 0.88815718 0.15538336 1.144607e-09
[2,] 0.005800070 4.918971e-03 0.01437443 0.01405623 0.01228556 5.798751e-03
            [,31]       [,32]        [,33]      [,34]        [,35]        [,36]
[1,] 1.636830e-29 0.013224006 4.744782e-68 0.15734871 1.779667e-09 1.163330e-10
[2,] 3.669609e-03 0.007829119 3.070916e-03 0.01217326 6.897344e-03 1.315361e-03
> 
> sum(Counter[1,])/sum(Counter[2,])
[1] 0.005146188
> 
> 
> # MUST RENAME THE OUTPUT FILE
> save(Counter, Blocks, BinomTests, file = "/home/alex/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/Phoenix/randomProcessesSimulationTest/SimOutput160329a-1million.rda")
> 
