########### INITIALISING STUFF
# From Alex's new method.
Capacities = c(3275, 6370, 6824, 689, 764, 880, 3915, 297, 123, 1180)
# Capacities = c(3211, 6310, 6792, 683, 760, 858, 3873, 286, 118, 1131)
Capacities
# Number of links in the system.
Link = length(Capacities)
Link
# Keeps track of how many circuits are being used.
CircUse = rep(0,Link)
CircUse
# The A matrix.
A_MATRIX01 <- read.csv("/home/alex/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/Phoenix/randomProcessesSimulationTest/A_MATRIX01.csv", row.names=1)
A = data.matrix(A_MATRIX01, rownames.force = NA)
A
# The route traffic.
TrafficVector01 <- read.csv("/home/alex/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysisAlexSem1/Phoenix/randomProcessesSimulationTest/TrafficVector01.csv", row.names=1)
RouteTraffic = as.numeric(TrafficVector01)
RouteTraffic
Routes = length(RouteTraffic)
Routes
# Didn't end up needing this.
# The link traffic, obtained by accounting for the traffic from the different routes.
# LinkTraffic = A %*% RouteTraffic
# LinkTraffic
# Keeps track of how many of the different types (routes) of calls are in the system.
CallTypes = rep(0,Routes)
CallTypes
########### DEFINING A NEW EXPONENTIAL FUNCTION
# STUFFED T_T
NewExp = function(rates){
vectorlength = length(rates)
Output = rep(0,vectorlength)
# Basically, this function returns a huge value if the rate is 0, else is a normal exponential random variable
for (i in 1:vectorlength) {
if (rates[i] == 0) {
# Gives a large number.
Output[i] = 2.0*10^4
} else {
# Just gives an exponential as usual.
Output[i] = rexp(1,rates[i])
}
}
return(Output)
}
# How many time are we going to run this loop?
# Trials = 4*42*10^6
Trials = 10^6
# Counter: a vector countaining (Non-blocked calls, blocked calls, number of times a call arrives)
# Counter = c(0,0,0)
### Now Counter is a 2 x Routes matrix. Counter[1,j] counts the number of times a route j call is blocked, and Counter[2,j] counts the number of times a route j call arrives.
Counter = matrix(rep(0,2*Routes),nrow=2)
StartCounting = 0.5 * 10^6
# We don't have to worry about a call ending happening with zero calls of that type in the system, as that's taken care of in the NewExp function.
# Check how long this goes for.
ptm <- proc.time()
for (i in 1:Trials) {
InCalls = rexp(Routes,RouteTraffic) # Generates a random variable for each route - time unti a call of each type arrives.
EndCalls = NewExp(CallTypes) # Generates a time until a call of each time ends.
# Find the position minimum from these above values, i.e. what is the event that occurs first, and more importantly, WHERE?
# "pmin" makes a vector which takes the minimum from each position of the input vectors. Then "which.min" says where the minimum is overall.
MinPosition = which.min(pmin(InCalls,EndCalls))
WhichVector = 0
# If WhichVector = 0, then it's an incoming call. Else it's a call ending.
if (min(EndCalls) < min(InCalls)) {
WhichVector = 1
}
# If it's a position j call in EndCalls, subtract column j in A from CircUse
if (WhichVector == 1) {
CallTypes[MinPosition] = CallTypes[MinPosition] - 1
CircUse = A %*% CallTypes
if (min(CircUse < 0)) {
cat("Error! You've got negative circuits! Fool.")
}
}
# If it's a position k in InCalls...
if (WhichVector == 0) {
if (i > StartCounting) {
# Counter[3] = Counter[3] + 1 # Add one more call arriving.
Counter[2,MinPosition] = Counter[2,MinPosition] + 1
}
# ... AND CircUse < Capacities for every RELEVANT component
RelevCapac = CircUse * A[,MinPosition]
Differences = Capacities - RelevCapac
if (min(Differences) > 0) {
# Add the relevant circuits for that call.
CallTypes[MinPosition] = CallTypes[MinPosition] + 1
CircUse = A %*% CallTypes
# Start after 1000 to make sure we're at equilibrium. UPDATE: I'm not going to bother counting calls that get through any more, only calls that are blocked.
# if (i > StartCounting) {
#  Counter[1] = Counter[1] + 1
#}
}
# But what if the one of the links full?
if (min(Differences) == 0) {
# A call is blocked. Counter is a vector which counts when calls are blocked.
# cat("YOU SHALL NOT PASS! ")
if (i > StartCounting) {
# Counter[2] = Counter[2] + 1
Counter[1,MinPosition] = Counter[1,MinPosition] + 1
}
}
# Sanity check.
if (min(Differences) < 0) {
cat("Error! min(Differences) < 0")
}
}
# We never want link use < 0.
if (min(CircUse) < 0) {
cat("Error! min(CircUse) < 0")
}
# Prints the state of the system (so we can see what's going on.)
# print("Output:")
# print(CallTypes)
# print(CircUse)
# print(Counter)
}
