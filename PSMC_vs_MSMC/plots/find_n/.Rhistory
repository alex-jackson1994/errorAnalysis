m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1)
# Lat:health:Lon is the least significant (lowest deviance) so we can remove as G^2 < df
m1 = update(m1, . ~ . - Lat:health:Lon) # can we remove any others?
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m1 = update(m1, . ~ . - Lat:Class:Lon)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m1 = update(m1, . ~ . - Lon:Class:health)
summary(m1)
m1 = update(m1, . ~ . - Lon:Class:health)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
summary(m2)
summary(m1)
# if health was the health of X, and Progeny was number of progeny of X, then it might make sense to offset by health
pFull = glm(formula = Progeny ~ Lat*Lon*Class - Lat:Lon:Class, offset=log(health), data = dat, family = poisson)
summary(pFull)
# we have significant class w/ lat & lon interactions
pFull.resdev = residuals(pFull, type="deviance")
pFull.fit = fitted(pFull)
plot(pFull.fit, pFull.resdev)
# plot(pFull.fit, pFull.resdev)
# take logs to account for clustering low
plot(pFull.fit, pFull.resdev, log="x")
# there still looks like there's some kind of trend unaccounted for. Is the offset correct?
pFull2 = update(pFull, . ~ . + log(health))
summary(pFull2) # so the offset health is still significant so that was wrong
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1.resdev = residuals(m1, type="deviance")
m1.fit = fitted(m1)
plot(m1.fit, m1.resdev, log="x")
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1.resdev = residuals(m1, type="deviance")
m1.fit = fitted(m1)
plot(m1.fit, m1.resdev, log="x")
@
From Figure \ref{fig:poissFullInt}, there still looks like there's some unaccounted-for trend (left-hand side, the right-hand side looks okay). However, this could be due to the very high number of 0/1 \emph{Progeny}. We will try and simplify this model.
dat = read.csv("~/Desktop/data/Career/JOBS/consultingAnalyst_Symbolix/interviewAnalysis/HR_Testset.csv")
library("nnet", lib.loc="/usr/local/lib/R/library")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1)
# Lat:health:Lon is the least significant (lowest deviance) so we can remove as G^2 < df
m1 = update(m1, . ~ . - Lat:health:Lon) # can we remove any others?
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
# Remove Lat:Class:Lon
m1 = update(m1, . ~ . - Lat:Class:Lon)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
# remove Lon:Class:health
m1 = update(m1, . ~ . - Lon:Class:health)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1, test="Chisq")
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1.resdev = residuals(m1, type="deviance")
m1.fit = fitted(m1)
plot(m1.fit, m1.resdev, log="x")
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1)
# Lat:health:Lon is the least significant (lowest deviance) so we can remove as G^2 < df
m1 = update(m1, . ~ . - Lat:health:Lon) # can we remove any others?
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
# Remove Lat:Class:Lon
m1 = update(m1, . ~ . - Lat:Class:Lon)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
# remove Lon:Class:health
m1 = update(m1, . ~ . - Lon:Class:health)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1, test="Chisq")
# can't remove this
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1.resdev = residuals(m1, type="deviance")
m1.fit = fitted(m1)
plot(m1.fit, m1.resdev, log="x")
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1, test="Chisq")
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1, test="Chisq")
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1, test="Chisq")
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1, test="Chisq")
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
summary(m1)
# this doesn't look great.
m1.resdev = residuals(m1, type="deviance")
m1.fit = fitted(m1)
plot(m1.fit, m1.resdev, log="x")
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1)
# Lat:health:Lon is the least significant (lowest deviance) so we can remove as G^2 < df
m1 = update(m1, . ~ . - Lat:health:Lon) # can we remove any others?
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
# Remove Lat:Class:Lon
m1 = update(m1, . ~ . - Lat:Class:Lon)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
# remove Lon:Class:health
m1 = update(m1, . ~ . - Lon:Class:health)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1, test="Chisq")
# can't remove this
m1 = update(m1, . ~ . - Lat:Class:health)
summary(m1)
anova(m2,m1)
m1 = glm(formula = Progeny ~ Lat*Lon*Class*health - Lat:Lon:Class:health, data = dat, family = poisson)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health:Lon)
anova(m2,m1)
# Lat:health:Lon is the least significant (lowest deviance) so we can remove as G^2 < df
m1 = update(m1, . ~ . - Lat:health:Lon) # can we remove any others?
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class:Lon)
anova(m2,m1)
# Remove Lat:Class:Lon
m1 = update(m1, . ~ . - Lat:Class:Lon)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1)
m2 = update(m1, . ~ . - Lon:Class:health)
anova(m2,m1)
# remove Lon:Class:health
m1 = update(m1, . ~ . - Lon:Class:health)
m2 = update(m1, . ~ . - Lat:Class:health)
anova(m2,m1, test="Chisq")
m1 = update(m1, . ~ . - Lat:Class:health)
m1
m2 = update(m1, . ~ . - Lat:Lon)
m2
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:Class)
anova(m2,m1)
m2 = update(m1, . ~ . - Lat:health)
anova(m2,m1)
boxplot(dat$health)
logH = log(dat$health)
levels(dat$Class)
dfFam = subset(dat, Class == "Familial")
dfPair = subset(dat, Class == "Pair")
dfUnit = subset(dat, Class == "Unit")
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqplot(dFam$health)
sd(dFam$health)
qqplot(dFam$health)
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health)
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health); qqnorm(log(dFam$health))
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqplot(dPair$health)
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health)
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health); qqnorm(log(dFam$health)); qqline
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health); qqnorm(log(dFam$health)); qqline
dFam = subset(dat, Class == "Familial")
sd(dFam$health)
qqnorm(dFam$health)
qqnorm(log(dFam$health))
qqline
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health); qqnorm(log(dFam$health)); qqline()
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health); qqnorm(log(dFam$health)); qqline(log(dFam$health))
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health); qqnorm(log(dPair$health)); qqline(log(dPair$health))
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health); qqnorm(log(dPair$health)); qqline(log(dPair$health))
qqnorm(dFam$health, distribution = "beta")
## "QQ-Chisquare" : --------------------------
y <- rchisq(500, df = 3)
warnings()
y <- rchisq(500, df = 3)
## Q-Q plot for Chi^2 data against true theoretical distribution:
qqplot(qchisq(ppoints(500), df = 3), y,
main = expression("Q-Q plot for" ~~ {chi^2}[nu == 3]))
qqline(y, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
mtext("qqline(*, dist = qchisq(., df=3), prob = c(0.1, 0.6))")
levels(dat$Class)
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health); qqnorm(log(dFam$health))
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health); qqnorm(log(dPair$health))
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health); qqnorm(log(dPair$health))
par(mfrow=c(1,1))
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqnorm(log(dFam$health), main = "log(Familial)")
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health); qqnorm(log(dPair$health))
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health); qqnorm(log(dPair$health))
par(mfrow=c(1,1))
levels(dat$Class)
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqnorm(log(dFam$health), main = "log(Familial)")
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqnorm(log(dPair$health), main = "log(Pair)")
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqnorm(log(dPair$health), main = "log(Unit)")
par(mfrow=c(1,1))
levels(dat$Class)
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)")
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqnorm(log(dPair$health), main = "log(Pair)")
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqnorm(log(dPair$health), main = "log(Unit)")
par(mfrow=c(1,1))
levels(dat$Class)
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)"); qqline(log(dFam$health))
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqline(dPair$health); qqnorm(log(dPair$health), main = "log(Pair)"); qqline(log(dPair$health))
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqline(dUnit$health); qqnorm(log(dUnit$health), main = "log(Unit)"); qqline(log(dUnit$health))
par(mfrow=c(1,1))
# does health differ
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)"); qqline(log(dFam$health)); sd(dFam$health)
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqline(dPair$health); qqnorm(log(dPair$health), main = "log(Pair)"); qqline(log(dPair$health)); dPair$health
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqline(dUnit$health); qqnorm(log(dUnit$health), main = "log(Unit)"); qqline(log(dUnit$health)); dFUnit$health
par(mfrow=c(1,1))
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)"); qqline(log(dFam$health)); sd(dFam$health)
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqline(dPair$health); qqnorm(log(dPair$health), main = "log(Pair)"); qqline(log(dPair$health)); dPair$health
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqline(dUnit$health); qqnorm(log(dUnit$health), main = "log(Unit)"); qqline(log(dUnit$health)); dUnit$health
par(mfrow=c(1,1))
################### HEALTHHH
# does health differ
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)"); qqline(log(dFam$health)); sd(dFam$health)
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqline(dPair$health); qqnorm(log(dPair$health), main = "log(Pair)"); qqline(log(dPair$health)); sd(dPair$health)
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqline(dUnit$health); qqnorm(log(dUnit$health), main = "log(Unit)"); qqline(log(dUnit$health)); sd(dUnit$health)
par(mfrow=c(1,1))
par(mfrow=c(2,3))
dFam = subset(dat, Class == "Familial"); sd(dFam$health); qqnorm(dFam$health, main = "Familial"); qqline(dFam$health); qqnorm(log(dFam$health), main = "log(Familial)"); qqline(log(dFam$health));
dPair = subset(dat, Class == "Pair"); sd(dPair$health); qqnorm(dPair$health, main = "Pair"); qqline(dPair$health); qqnorm(log(dPair$health), main = "log(Pair)"); qqline(log(dPair$health));
dUnit = subset(dat, Class == "Unit"); sd(dUnit$health); qqnorm(dUnit$health, main = "Unit"); qqline(dUnit$health); qqnorm(log(dUnit$health), main = "log(Unit)"); qqline(log(dUnit$health));
par(mfrow=c(1,1))
health.lm = lm(health ~ Class, data)
health.lm = lm(health ~ Class, data = dat)
summary(health.lm)
anova(health.lm)
d
summary(lm(health ~ Lat, data = dat))
summary(lm(health ~ Lon, data = dat))
health.lm = lm(health ~ Class, data = dat)
anova(health.lm)
summary(lm(health ~ Class, data = dat))
summary(lm(health ~ Lat, data = dat))
summary(lm(health ~ Lon, data = dat))
summary(lm(health ~ Class, data = dat))
summary(lm(health ~ Lat, data = dat))
summary(lm(health ~ Lon, data = dat))
summary(lm(health ~ Class, data = dat))
summary(lm(health ~ Lon, data = dat))
lm(health ~ Progeny, data = dat)
summary(lm(health ~ Progeny, data = dat))
summary(lm(health ~ Class + Lon, data = dat))
summary(lm(health ~ Class*Lon, data = dat))
summary(lm(health ~ Class+Lon, data = dat))
h1.lm = lm(health ~ Class, data = dat)
anova(h1.lm)
plot(h1.lm)
par(mfrow=c(2,2))
plot(h1.lm)
par(mfrow=c(1,1))
lm(health ~ Class, data = dat)
source('~/.active-rstudio-document', echo=TRUE)
par(mfrow=c(2,2))
plot(h1.lm)
par(mfrow=c(1,1))
summary(m2)
plotmatrix(dat)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
plotmatrix(dat)
install.packages("GGally")
library("GGally", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ggpairs(dat, colour = Class)
ggpairs(dat, colour = "Class")
ggpairs(dat, colour = "Class", alpha=.4)
ggpairs(dat, aes(colour = "Class", alpha=.4))
ggpairs(dat, mapping = aes(colour = "Class"))
head(dat)
ggpairs(dat, mapping = aes(colour = Class))
h1.lm = lm(health ~ Class, data = dat)
anova(h1.lm)
par(mfrow=c(2,2))
plot(h1.lm)
par(mfrow=c(1,1))
summary(h1.lm)
TukeyHSD(h1.lm)
aov(health ~ Class, data=dat)
?aov()
TukeyHSD(aov(health ~ Class, data=dat))
a1 = aov(health ~ Class, data=dat)
TukeyHSD(a1)
pbinom(4,20,.5)
pbinom(4,9,.5)
pbinom(4,20,.05)
pbinom(4,20,.05) - pbinom(3,20,.05)
1 - pbinom(3,20,.05)
pbinom(4,20,.05,lower.tail = FALSE)
pbinom(8,20,.05)- pbinom(3,20,.05)
pnorm(22, mean = 25, sd = sqrt(25/6))
pnorm(22, mean = 25, sd = sqrt(25/6), lower.tail = FALSE)
runif(3)
n = 5
plot(function(p){p(1-p)/n}, xlim = c(0,1), ylim=c(0,0.5), lty=1) #p_hat
plot.function(function(p){p(1-p)/n}, xlim = c(0,1), ylim=c(0,0.5), lty=1) #p_hat
p_hat = function(p){p(1-p)/n}
p_plus4 = function(p){(15*p^2-15*p+4)/(n+4)^2}
plot.function(p_hat, xlim = c(0,1), ylim=c(0,0.5), lty=1) #p_hat
p_hat(4)
n = 5
p_hat = function(p){return p(1-p)/n}
p_plus4 = function(p){return (15*p^2-15*p+4)/(n+4)^2}
plot.function(p_hat, xlim = c(0,1), ylim=c(0,0.5), lty=1) #p_hat
p
p_hat <- function(p){return p(1-p)/n}
p_hat <- function(p){return p*(1-p)/n}
p_hat = function(p){
val= p*(1-p)/n
return val
}
p_hat = function(p){
val= p*(1-p)/n
return(val)
}
plot.function(p_hat, xlim = c(0,1), ylim=c(0,0.5), lty=1) #p_hat
n = 5
p_hat = function(p){
return(p*(1-p)/n)
}
p_plus4 = function(p){
return((15*p^2-15*p+4)/(n+4)^2)
}
plot(p_hat, xlim = c(0,1), ylim=c(0,0.05), lty=1) #p_hat
lines(p_plus4, lty=2) #p_plus4
curve(p_plus4, lty=2) #p_plus4
plot(p_hat, xlim = c(0,1), ylim=c(0,0.05), lty=1) #p_hat
curve(p_plus4, lty=2) #p_plus4
plot(p_hat, xlim = c(0,1), ylim=c(0,0.05), lty=1) #p_hat
curve(p_plus4, lty=2) #p_plus4
plot(p_hat, xlim = c(0,1), ylim=c(0,0.05)) #p_hat
curve(p_plus4) #p_plus4
curve(p_hat, xlim = c(0,1), ylim=c(0,0.05)) #p_hat
curve(p_plus4) #p_plus4
curve(p_hat, xlim = c(0,1), ylim=c(0,0.05)) #p_hat
curve(p_plus4) #p_plus4
curve(p_hat, xlim = c(0,1), ylim=c(0,0.05)) #p_hat
n = 30
p_hat = function(p){
return(p*(1-p)/n)
}
p_plus4 = function(p){
return((15*p^2-15*p+4)/(n+4)^2)
}
curve(p_hat, xlim = c(0,1), ylim=c(0,0.05)) #p_hat
curve(p_plus4) #p_plus4
# For the Eurpoean bison...
# find n, the number of MSMC time bins needed to have T1(MSMC) be roughly equal to that of the 40-bin PSMC's T1(PSMC)
# T1 is the first non-zero time point
# we know that
T1_PSMC = 470.6476 # (see first time point from EurBisPSMC from EuropeanBison29AutosomesPSMCvsMSMC.R)
# the formula for t1(MSMC, unscaled) is t1 = -ln(1-1/n)
# thus, T1(MSMC) = -ln(1-1/n) * (GEN yrs/generation) / (MU mutations/bp/generation) (by the conversion to real time specified by Schiffels)
GEN = 8
MU = 1.25e-8
Ti_MSMC = function(i,n) {
return ( -log(1-i/n) * GEN / MU )
}
# now work out the difference in T1_PSMC and T1_MSMC for varying n
tvals = NULL
nvals = NULL
for (n in 1:100) {
tvals = append(tvals, Ti_MSMC(1,n) )
nvals = append(nvals, n)
}
df = data.frame(nvals, tvals)
df
#### okay, so this is producing different values than I'm getting in the MSMC bison output
# is there a scaling factor
scaleMSMCInput=function(MSMCInputFile){
MSMCInputTable<-read.table(MSMCInputFile, header=TRUE)
MSMCInputTable[,"scaledTime"]<-GEN*MSMCInputTable$left_time_boundary/MU
#  MSMCInputTable[,"scaledTimeHi"]<-GEN_hi*MSMCInputTable$left_time_boundary/MU
MSMCInputTable[,"scaledPopSize"]<-1/(2*MU*MSMCInputTable$lambda_00)
return(MSMCInputTable)
}
setwd("~/Dropbox/MAGenomics_2015/PSMC_Scholarship/errorAnalysis/PSMC_vs_MSMC/plots/find_n/")
EurBisMSMC <- scaleMSMCInput("../MSMC/EuropeanBison.Cow_UMD3_1.realigned_AllAutosomes_MSMCOutput.final.txt")
t = EurBisMSMC$scaledTime[2:length(EurBisMSMC$scaledTime)]
tratios = NULL
for (i in 1:length(t))  # -1 bc we don't want to include 0
{
tratios[i] = Ti_MSMC(i,40) / t[i]
}
tratios
scaleFactor = mean(tratios) # ???? it's 1790.292, WHY?????
# so the theoretical is 1790x larger than the ACTUAL OUTPUT????
# therefore we need to update our function to account for that.
Ti_MSMC_sF = function(i,n) {
return ( -log(1-i/n) * GEN / MU / scaleFactor)
}
nmax = 200
t1vals = rep(0, nmax)
nvals = rep(0, nmax)
# find T1...
for (n in 1:nmax) {
t1vals = append(t1vals, Ti_MSMC_sF(1,n) - T1_PSMC )
nvals = append(nvals, n)
}
df = data.frame(nvals, t1vals)
df
t1vals = NULL
nvals = NULL
closeEnough = 0
while (closeEnough == 0) {
t1vals = append(t1vals, Ti_MSMC_sF(1,n) - T1_PSMC )
nvals = append(nvals, n)
if (Ti_MSMC_sF(1,n) - T1_PSMC < 10)
{
closeEnough = 1
}
}
closeEnough = 0
n = 1
while (closeEnough == 0) {
t1vals = append(t1vals, Ti_MSMC_sF(1,n) - T1_PSMC )
nvals = append(nvals, n)
if (Ti_MSMC_sF(1,n) - T1_PSMC < 10)
{
closeEnough = 1
}
n = n + 1
}
(
q
df = data.frame(nvals, t1vals)
df
tail(df)
t1vals = NULL
nvals = NULL
# find T1...
# for (n in 1:nmax) {
#   t1vals = append(t1vals, Ti_MSMC_sF(1,n) - T1_PSMC )
#   nvals = append(nvals, n)
# }
closeEnough = 0
n = 1
while (closeEnough == 0) {
t1vals = append(t1vals, Ti_MSMC_sF(1,n) - T1_PSMC )
nvals = append(nvals, n)
n = n + 1
if (Ti_MSMC_sF(1,n) - T1_PSMC < 10)
{
closeEnough = 1
}
}
df = data.frame(nvals, t1vals)
df
